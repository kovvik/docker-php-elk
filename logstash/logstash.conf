# == Inputs ==
input {
  # Access log from apache
  file {
    path => "/var/logstash/*-access.log"
    type => "http"
  }

  # Query log from MySQL
  file {
    path => "/var/logstash/query.log"
    type => "mysql_query"
  }

  # Slow query log from MySQL
  file {
    path => "/var/logstash/slow_queries.log"
    type => "mysql_slow_query"
  }

  # Lumberjack input for future use
  lumberjack {
    port => 5000
    type => "logs"
    ssl_certificate => "/etc/logstash.d/lumberjack.crt"
    ssl_key => "/etc/logstash.d/lumberjack.key"
  }
}

# == Filters ==
filter {
  # HTTP
  if [type] == "http" {
    grok {
      match => { "message" => "%{IPORHOST:remote_addr} - %{USERNAME:remote_user} \[%{HTTPDATE:time_local}\] %{QS:request} %{WORD:request_protocol} %{INT:status} %{INT:body_bytes_sent} %{NUMBER:response_time} %{QS:http_referer} %{QS:http_user_agent}" }
      add_field => [ "server", "%{host}" ]
    }
    date {
      match => [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
    }

    mutate {
      convert => {
        "response_time" => "integer"
        "body_bytes_sent" => "integer"
      }
    }
  }

  # MySQL query log
  if [type] == "mysql_query" {

    # If it is not strarted with number(timestamp), we get it from the previous line
    multiline {
      what => previous
      pattern => "^[0-9]"
      negate => true
    }

    grok {
      match => {
        "message" => "^%{NUMBER:date} *%{NOTSPACE:time}"
      }
    }

    mutate {
      replace => {
        "time" => "%{date} %{time}"
      }
    }

    date {
      match => [ "time", "YYMMdd H:mm:ss", "YYMMdd HH:mm:ss" ]
    }

    mutate {
      remove_field => [ "time", "date" ]
    }

    # If we had the timestamp and the line no belong to the prevous line, split it
    if "_grokparsefailure" not in [tags] {
      split { }

      multiline {
        what => previous
        pattern => "^..[^0-9\s]"
      }

      # Split fields
      grok {
        match => {
          remove_field => "query_id"
          "message" => [
            "(\s+|[0-9]+\s[0-9:]+)\s*%{NUMBER:query_id}\s*%{WORD:query_type}\s*%{GREEDYDATA:query_string}"
          ]
        }
      }
    }

    # TODO: MySQL slow query log

  }
}

# == Outputs ==
output {
  # write to stdout to view in realtime :)
  stdout {
  }

  # Send data to elasticsearch
  elasticsearch {
    host => "elasticsearch"
    protocol => "http"
  }
}
